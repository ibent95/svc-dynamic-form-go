package services

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
	"unicode"
)

func RunBootstrap() {
	log.Println("🚧 Building bootstrap.go ...")

	type Component struct {
		Name        string
		Type        string
		VarName     string
		Constructor string
		Deps        []string
	}

	components := []Component{}
	seen := map[string]bool{}

	scanConstructors := func(dir, compType, pkg string) {
		entries, err := os.ReadDir(dir)
		if err != nil {
			log.Printf("Failed to read dir %s: %v", dir, err)
			return
		}

		for _, entry := range entries {
			if entry.IsDir() || !strings.HasSuffix(entry.Name(), ".go") {
				continue
			}

			filePath := filepath.Join(dir, entry.Name())
			fset := token.NewFileSet()
			node, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
			if err != nil {
				log.Printf("Failed to parse %s: %v", filePath, err)
				continue
			}

			ast.Inspect(node, func(n ast.Node) bool {
				fn, ok := n.(*ast.FuncDecl)
				if !ok || !strings.HasPrefix(fn.Name.Name, "New") || fn.Type.Results == nil {
					return true
				}

				name := strings.TrimPrefix(fn.Name.Name, "New")
				varName := lowerFirst(name)
				constructor := fmt.Sprintf("%s.New%s", pkg, name)
				deps := []string{}

				for _, param := range fn.Type.Params.List {
					if starExpr, ok := param.Type.(*ast.StarExpr); ok {
						if sel, ok := starExpr.X.(*ast.SelectorExpr); ok {
							deps = append(deps, sel.Sel.Name)
						}
					}
				}

				if !seen[name] {
					components = append(components, Component{
						Name:        name,
						Type:        compType,
						VarName:     varName,
						Constructor: constructor,
						Deps:        deps,
					})
					seen[name] = true
				}

				return false
			})
		}
	}

	scanConstructors("src/controllers", "controller", "controllers")
	scanConstructors("src/services", "service", "services")
	scanConstructors("src/repositories", "repository", "repositories")

	// Topological sort
	sorted := []Component{}
	added := map[string]bool{}
	for len(sorted) < len(components) {
		progress := false
		for _, comp := range components {
			if added[comp.Name] {
				continue
			}
			ok := true
			for _, dep := range comp.Deps {
				if !added[dep] {
					ok = false
					break
				}
			}
			if ok {
				sorted = append(sorted, comp)
				added[comp.Name] = true
				progress = true
			}
		}
		if !progress {
			log.Fatal("❌ Circular dependency detected or unresolved dependencies")
		}
	}

	var builder strings.Builder
	builder.WriteString("// Code generated by build.go. DO NOT EDIT.\n")
	builder.WriteString("package configs\n\n")
	builder.WriteString("import (\n")
	builder.WriteString("\t\"svc-dynamic-form-go/src/controllers\"\n")
	builder.WriteString("\t\"svc-dynamic-form-go/src/repositories\"\n")
	builder.WriteString("\t\"svc-dynamic-form-go/src/services\"\n")
	builder.WriteString(")\n\n")

	builder.WriteString("type RouteOptions struct {\n")
	builder.WriteString("\t// REGISTER CONTROLLERS BELLOW\n")
	for _, comp := range sorted {
		if comp.Type == "controller" {
			builder.WriteString(fmt.Sprintf("\t%s *controllers.%s\n", comp.Name, comp.Name))
		}
	}
	builder.WriteString("\n}\n\n")

	builder.WriteString("func Build() RouteOptions {\n")
	builder.WriteString("\t// INSTANTIATE REPOSITORIES, SERVICES, AND CONTROLLERS BELLOW\n")
	for _, comp := range sorted {
		args := []string{}
		for _, dep := range comp.Deps {
			args = append(args, lowerFirst(dep))
		}
		builder.WriteString(fmt.Sprintf("\t%s := %s(%s)\n", comp.VarName, comp.Constructor, strings.Join(args, ", ")))
	}
	builder.WriteString("\n\treturn RouteOptions{\n")
	builder.WriteString("\t\t// REGISTER THE INSTANCES OF CONTROLLERS BELLOW\n")
	for _, comp := range sorted {
		if comp.Type == "controller" {
			builder.WriteString(fmt.Sprintf("\t\t%s: %s,\n", comp.Name, comp.VarName))
		}
	}
	builder.WriteString("\n\t}\n\n")
	builder.WriteString("}\n\n")

	err := os.WriteFile(filepath.Join("configs", "bootstrap.go"), []byte(builder.String()), 0644)
	if err != nil {
		log.Fatal("❌ Failed to write bootstrap.go:", err)
	}
	fmt.Println("✅ bootstrap.go successfully generated.")
}

func lowerFirst(s string) string {
	runes := []rune(s)
	if len(runes) == 0 {
		return s
	}
	runes[0] = unicode.ToLower(runes[0])
	return string(runes)
}
