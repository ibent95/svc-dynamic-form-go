package services

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
	"unicode"
)

func RunBootstrap() {
	log.Println("üöß Building bootstrap.go ...")

	components := collectAllComponents()
	sorted := topoSort(components)
	content := generateBootstrapContent(sorted)

	err := os.WriteFile(filepath.Join("configs", "bootstrap.go"), []byte(content), 0644)
	if err != nil {
		log.Fatal("‚ùå Failed to write bootstrap.go:", err)
	}
	fmt.Println("‚úÖ bootstrap.go successfully generated.")
}

type Component struct {
	Name        string
	Type        string
	VarName     string
	Constructor string
	Deps        []string
}

func collectAllComponents() []Component {
	var components []Component

	components = append(components, scanConstructorsFromDir("src/controllers", "controller", "controllers")...)
	components = append(components, scanConstructorsFromDir("src/services", "service", "services")...)
	components = append(components, scanConstructorsFromDir("src/repositories", "repository", "repositories")...)

	return components
}

func scanConstructorsFromDir(dir, compType, pkg string) []Component {
	var result []Component
	entries, err := os.ReadDir(dir)
	if err != nil {
		log.Printf("Failed to read dir %s: %v", dir, err)
		return result
	}

	for _, entry := range entries {
		if entry.IsDir() || !strings.HasSuffix(entry.Name(), ".go") {
			continue
		}

		filePath := filepath.Join(dir, entry.Name())
		fset := token.NewFileSet()
		node, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
		if err != nil {
			log.Printf("Failed to parse %s: %v", filePath, err)
			continue
		}

		result = append(result, extractComponentsFromFile(node, compType, pkg)...)
	}

	return result
}

func extractComponentsFromFile(node *ast.File, compType, pkg string) []Component {
	var comps []Component
	seen := map[string]bool{}

	ast.Inspect(node, func(n ast.Node) bool {
		fn, ok := n.(*ast.FuncDecl)
		if !ok || !strings.HasPrefix(fn.Name.Name, "New") || fn.Type.Results == nil {
			return true
		}
		name := strings.TrimPrefix(fn.Name.Name, "New")
		if seen[name] {
			return false
		}
		var deps []string
		for _, param := range fn.Type.Params.List {
			if starExpr, ok := param.Type.(*ast.StarExpr); ok {
				if sel, ok := starExpr.X.(*ast.SelectorExpr); ok {
					deps = append(deps, sel.Sel.Name)
				}
			}
		}
		comps = append(comps, Component{
			Name:        name,
			Type:        compType,
			VarName:     lowerFirst(name),
			Constructor: fmt.Sprintf("%s.New%s", pkg, name),
			Deps:        deps,
		})
		seen[name] = true
		return false
	})

	return comps
}

func topoSort(components []Component) []Component {
	var sorted []Component
	added := map[string]bool{}

	for len(sorted) < len(components) {
		progress := false

		for _, comp := range components {
			if added[comp.Name] || !canAddComponent(comp, added) {
				continue
			}
			sorted = append(sorted, comp)
			added[comp.Name] = true
			progress = true
		}

		if !progress {
			log.Fatal("‚ùå Circular dependency detected or unresolved dependencies")
		}
	}

	return sorted
}

func canAddComponent(comp Component, added map[string]bool) bool {
	for _, dep := range comp.Deps {
		if !added[dep] {
			return false
		}
	}
	return true
}

func generateBootstrapContent(sorted []Component) string {
	var builder strings.Builder

	builder.WriteString("// Code generated by build.go. DO NOT EDIT.\n")
	builder.WriteString("package configs\n\n")
	builder.WriteString("import (\n")
	builder.WriteString("\t\"svc-dynamic-form-go/src/controllers\"\n")
	builder.WriteString("\t\"svc-dynamic-form-go/src/repositories\"\n")
	builder.WriteString("\t\"svc-dynamic-form-go/src/services\"\n")
	builder.WriteString(")\n\n")

	builder.WriteString("type RouteOptions struct {\n")
	builder.WriteString("\t// REGISTER CONTROLLERS BELLOW\n")
	for _, comp := range sorted {
		if comp.Type == "controller" {
			builder.WriteString(fmt.Sprintf("\t%s *controllers.%s\n", comp.Name, comp.Name))
		}
	}
	builder.WriteString("\n}\n\n")

	builder.WriteString("func Build() RouteOptions {\n")
	builder.WriteString("\t// INSTANTIATE REPOSITORIES, SERVICES, AND CONTROLLERS BELLOW\n")
	for _, comp := range sorted {
		args := []string{}
		for _, dep := range comp.Deps {
			args = append(args, lowerFirst(dep))
		}
		builder.WriteString(fmt.Sprintf("\t%s := %s(%s)\n", comp.VarName, comp.Constructor, strings.Join(args, ", ")))
	}
	builder.WriteString("\n\treturn RouteOptions{\n")
	builder.WriteString("\t\t// REGISTER THE INSTANCES OF CONTROLLERS BELLOW\n")
	for _, comp := range sorted {
		if comp.Type == "controller" {
			builder.WriteString(fmt.Sprintf("\t\t%s: %s,\n", comp.Name, comp.VarName))
		}
	}
	builder.WriteString("\n\t}\n\n")
	builder.WriteString("}\n\n")

	return builder.String()
}

func lowerFirst(s string) string {
	runes := []rune(s)
	if len(runes) == 0 {
		return s
	}
	runes[0] = unicode.ToLower(runes[0])
	return string(runes)
}
